<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\translator\Translator as Translator;               //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim

    
    // Get module information (include cache and for public user)
    $app->map(['GET','OPTIONS'],'/translator/get/info/', function (Request $request, Response $response) {
        $t = new Translator($this->db);
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag2hour.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        $body->write($t->viewInfo());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);

    // Post to make translate 
    $app->post('/translator/google/translate', function (Request $request, Response $response) {
        $t = new Translator($this->db);
        $t->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        
        $t->username = $datapost['Username'];
        $t->token = $datapost['Token'];

        $t->source = (empty($datapost['Source'])?'':$datapost['Source']);
        $t->target = (empty($datapost['Target'])?$t->lang:$datapost['Target']);
        $t->show = (empty($datapost['Show'])?'':$datapost['Show']);
        $t->text = $datapost['Text'];
        
        $body = $response->getBody();
        $body->write($t->translate());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Text','1-5000','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // Post to make translate for public
    $app->map(['POST','OPTIONS'],'/translator/google/translate/public/', function (Request $request, Response $response) {
        $t = new Translator($this->db);
        $t->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $t->source = (empty($datapost['Source'])?'':$datapost['Source']);
        $t->target = (empty($datapost['Target'])?$t->lang:$datapost['Target']);
        $t->show = (empty($datapost['Show'])?'':$datapost['Show']);
        $t->text = $datapost['Text'];
        
        $body = $response->getBody();
        $body->write($t->translatePublic());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey)
        ->add(new ValidateParam('Text','1-5000','required'));